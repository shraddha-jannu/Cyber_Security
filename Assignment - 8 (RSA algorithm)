import java.math.*;
import java.util.*;

class assign8_RSA {
    public static void main(String args[]) {
        int n, z, d = 0, e, i;

        // The number to be encrypted and decrypted
        // author: @Tanish Banthia

        double c;
        BigInteger msgback;
        Scanner sc = new Scanner(System.in); // System.in is a standard input stream
        System.out.print("Enter a prime number p: ");
        int p = sc.nextInt();
        System.out.print("Enter a prime number q: ");
        int q = sc.nextInt();
        System.out.print("Enter a message msg: ");
        int msg = sc.nextInt();

        n = p * q;
        z = (p - 1) * (q - 1);
        System.out.println("The value of z = " + z);

        for (e = 2; e < z; e++) {
            // e is for public key exponent
            if (gcd(e, z) == 1) {
                break;
            }
        }
        System.out.println("The value of e = " + e);
        for (i = 0; i <= 9; i++) {
            int x = 1 + (i * z);

            // d is for private key exponent
            if (x % e == 0) {
                d = x / e;
                break;
            }
        }
        System.out.println("The value of d = " + d);
        c = (Math.pow(msg, e)) % n;
        System.out.println("Encrypted message is: " + c);

        // converting int value of n to BigInteger
        BigInteger N = BigInteger.valueOf(n);

        // converting float value of c to BigInteger
        BigInteger C = BigDecimal.valueOf(c).toBigInteger();
        msgback = (C.pow(d)).mod(N);
        System.out.println("Decrypted message is: " + msgback);
    }

    // Method to calculate the greatest common divisor (GCD) of two numbers
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
